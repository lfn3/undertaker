{:benchmarks [{:name    :java-api-style-string-gen-in-prop
               :fn      undertaker.benchmarks/run-in-prop
               :args    [:param/times :state/java-style-string-gen]
               :options {:ops-per-invocation 100}}

              {:name :java-api-style-string-gen
               :fn   undertaker.benchmarks/java-api-get-string
               :args [:param/size]}

              {:name    :generate-vecs
               :fn      undertaker.benchmarks/run-in-prop
               :args    [:param/times :state/vector-generator]
               :options {:ops-per-invocation 100}}

              {:name    :multi-source
               :fn      undertaker.benchmarks/repeatedly-get-bytes-from-source
               :args    [:param/times :state/multi-source :state/range]
               :options {:ops-per-invocation 100}}

              {:name    :wrapped-random
               :fn      undertaker.benchmarks/repeatedly-get-bytes-from-source
               :args    [:param/times :state/wrapped-random-source :state/range]
               :options {:ops-per-invocation 100}}

              {:name    :generate-maps
               :fn      undertaker.benchmarks/run-in-prop
               :args    [:param/times :state/map-generator]
               :options {:ops-per-invocation 100}}

              {:name    :generate-string-maps
               :fn      undertaker.benchmarks/run-in-prop
               :args    [:param/times :state/string-map-generator]
               :options {:ops-per-invocation 100}}

              {:name :map-into-range
               :fn   undertaker.bytes/map-into-ranges!
               :args [:state/input-arr :state/range]}

              {:name :map-into-ranges
               :fn   undertaker.bytes/map-into-ranges!
               :args [:state/input-arr :state/ranges]}]

 :states     {:rand-int              (partial rand-int 1184841129)
              :input-arr             (fn [] (byte-array (repeatedly 4 (partial + -128 (rand-int 256)))))
              :range                 (fn [] (vector
                                              [[(rand-int -128)
                                                (rand-int -128)
                                                (rand-int -128)
                                                (rand-int -128)]
                                               [0 0 0 0]]
                                              [[0 0 0 0]
                                               [(rand-int 127)
                                                (rand-int 127)
                                                (rand-int 127)
                                                (rand-int 127)]]))
              :ranges                (fn [] (vector
                                              [[(+ -128 (rand-int 32))
                                                (+ -128 (rand-int 32))
                                                (+ -128 (rand-int 32))
                                                (+ -128 (rand-int 32))]
                                               [-96 -96 -96 -96]]
                                              [[(+ -96 (rand-int 32))
                                                (+ -96 (rand-int 32))
                                                (+ -96 (rand-int 32))
                                                (+ -96 (rand-int 32))]
                                               [-64 -64 -64 -64]]
                                              [[(+ -64 (rand-int 32))
                                                (+ -64 (rand-int 32))
                                                (+ -64 (rand-int 32))
                                                (+ -64 (rand-int 32))]
                                               [-32 -32 -32 -32]]
                                              [[(+ -32 (rand-int 32))
                                                (+ -32 (rand-int 32))
                                                (+ -32 (rand-int 32))
                                                (+ -32 (rand-int 32))]
                                               [0 0 0 0]]

                                              [[0 0 0 0]
                                               [(rand-int 32)
                                                (rand-int 32)
                                                (rand-int 32)
                                                (rand-int 32)]]
                                              [[32 32 32 32]
                                               [(+ 64 (rand-int 32))
                                                (+ 64 (rand-int 32))
                                                (+ 64 (rand-int 32))
                                                (+ 64 (rand-int 32))]]
                                              [[64 64 64 64]
                                               [(+ 96 (rand-int 32))
                                                (+ 96 (rand-int 32))
                                                (+ 96 (rand-int 32))
                                                (+ 96 (rand-int 32))]]
                                              [[96 96 96 96]
                                               [(+ 128 (rand-int 32))
                                                (+ 128 (rand-int 32))
                                                (+ 128 (rand-int 32))
                                                (+ 128 (rand-int 32))]]))

              :multi-source          {:fn   undertaker.source.multi/make-source
                                      :args [:state/rand-int]}

              :wrapped-random-source {:fn   undertaker.source.wrapped-random/make-source
                                      :args [:state/rand-int]}

              :map-generator         {:fn   undertaker.core/map-of
                                      :args [:state/kv-gen]}
              :kv-gen                undertaker.benchmarks/kv-gen

              :string-map-generator  {:fn   undertaker.core/map-of
                                      :args [:state/string-kv-gen]}
              :string-kv-gen         undertaker.benchmarks/string-kv-gen

              :char-gen              undertaker.core/char
              :vector-generator      {:fn   undertaker.core/vec-of
                                      :args [:state/char-gen]}
              :java-style-string-gen {:fn   undertaker.benchmarks/java-api-get-string
                                      :args [:param/size]}}

 :params     {:times 100
              :size  2048}

 :options    {:fail-on-error true}}
